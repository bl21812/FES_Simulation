import math
from helpers.MuscleVelocity import getMuscleVelocity
from helpers.regression import modelEval
from helpers.GravityMoment import gravityMoment

ankleInertia = 90
mass = 75 # kg

# Wrapper for the system of state-space equations.
def model(x, muscles, models, t):
  '''
  @param: x: state vector [ankle angle, angular velocity, muscle normalized CE lengths...]
  @param muscles: list of HillTypeMuscleModel objs. the order corresponds to the muscle normalized CE lengths from x at index 2 onwards
  @param models: list of regression models used to make predictions in the order: forceLengthRegressionModel, forceVelocityRegressionModel, angleTorqueRegressionModel
  @param t: time step to find the activation
  '''
  forceLengthRegressionModel, forceVelocityRegressionModel = models
  
  theta, angularVelocity = x[:2]
  normMuscleLengths = x[2:]

  assert len(muscles) == len(normMuscleLengths)

  muscleNormLengthDerivs = [] 
  muscleTorques = 0
  for muscle, normMuscleLength in zip(muscles, normMuscleLengths):
    # first find the params to find the length derivatives
    muscleTendonLength = muscle.muscleTendonLength(theta)
    normTendonLength = muscle.normTendonLength(muscleTendonLength, normMuscleLength)
    lengthDeriv = getMuscleVelocity(
                    a = muscle.activationModel.getNextActivation(theta, t),
                    lm = normMuscleLength, 
                    lt = normTendonLength, 
                    alpha = muscle.pennation, 
                    forceLengthRegressionModel = forceLengthRegressionModel, 
                    forceVelocityRegressionModel = forceVelocityRegressionModel
                  )
    muscleNormLengthDerivs.append(lengthDeriv)

    # also calculate the torques generated by each muscle
    torque = muscle.momentArm * muscle.getForce(muscleTendonLength, normMuscleLength)
    muscleTorques += torque

  angularVelocityDeriv = (-muscleTorques + gravityMoment(theta, mass))/ankleInertia
  
  return [angularVelocity, angularVelocityDeriv] + muscleNormLengthDerivs
