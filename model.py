from helpers.MuscleVelocity import getMuscleVelocity

ankleInertia = 90

# Wrapper for the system of state-space equations.
def model(x, muscles, forceLengthRegressionModel, forceVelocityRegressionModel):
  '''
  @param: x: state vector [ankle angle, angular velocity, muscle normalized CE lengths...]
  @param muscles: list of HillTypeMuscleModel objs. the order corresponds to the muscle normalized CE lengths from x at index 2 onwards
  '''
  theta, angularVelocity = x[:2]
  normMuscleLengths = x[2:]

  assert len(muscles) == len(normMuscleLengths)

  muscleNormLengthDerivs = [] 
  muscleTorques = []
  for muscle, normMuscleLength in zip(muscles, normMuscleLengths):
    # first find the params to find the length derivatives
    muscleTendonLength = muscle.muscleTendonLength(theta)
    normTendonLength = muscle.normTendonLength(muscleTendonLength, normMuscleLength)
    lengthDeriv = getMuscleVelocity(
                    a = muscle.activationFunc(theta), 
                    lm = normMuscleLength, 
                    lt = normTendonLength, 
                    alpha = muscle.pennation, 
                    forceLengthRegressionModel = forceLengthRegressionModel, 
                    forceVelocityRegressionModel = forceVelocityRegressionModel
                  )
    muscleNormLengthDerivs.append(lengthDeriv)

    # also calculate the torques generated by each muscle
    torque = muscle.momentArm * muscle.getForce(muscleTendonLength, normMuscleLength)
    muscleTorques.append(torque)

  angularVelocityDeriv = ankleTorque(theta)/ankleInertia
  
  return [angularVelocity, angularVelocityDeriv] + muscleNormLengthDerivs


def ankleTorque(theta):
  '''
  @param theta: angle of the ankle in rad
  
  Returns the approximated ankle torque given the ankle angle. 
  Function is a sixth order polynomial, which approximates the ankle torque based on data from toe off to maximum flexion point of the ankle during swing phase.
  '''
  a = -4.6691
  b = 8.3679
  c = 4.7637
  d = -7.8237
  e = -9.9837
  f = 13.1250
  g = -3.5774

  return a + (b * theta) + (c * theta**2) + (d * theta**3) + (e * theta**4) + (f * theta**5) + (g * theta**6) 
  